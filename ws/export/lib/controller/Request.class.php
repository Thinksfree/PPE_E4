<?php

// Generated by Haxe 3.4.2
class controller_Request {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->query = php_Web::getParamsString();
		$this->method = php_Web::getMethod();
		$this->headers = new haxe_ds_StringMap();
		{
			$header = php_Web::getClientHeaders()->iterator();
			while($header->hasNext()) {
				$header1 = $header->next();
				$tmp = $this->headers;
				$s = strtolower($header1->header);
				$tmp1 = str_replace("_", "-", $s);
				$tmp->set($tmp1, $header1->value);
				unset($tmp1,$tmp,$s,$header1);
			}
		}
		$this->cookies = php_Web::getCookies();
		$this->data = $this->parseBody(php_Web::getPostData());
		$this->ip = $_SERVER['REMOTE_ADDR'];
		$this->lang = $this->headers->get("accept-language");
		if($this->lang !== null) {
			$this->lang = _hx_substr($this->lang, 0, 2);
		}
		$this->referer = $this->headers->get("referer");
	}}
	public $query;
	public $method;
	public $headers;
	public $data;
	public $cookies;
	public $ip;
	public $lang;
	public $referer;
	public function redirect($url) {
		php_Web::redirect($url);
	}
	public function send($data) {
		Sys::hprint($data);
	}
	public function setCookie($key, $value, $expire = null) {
		if($expire === null) {
			php_Web::setCookie($key, $value, null, null, null, null, null);
		} else {
			php_Web::setCookie($key, $value, $expire, null, null, null, null);
		}
	}
	public function setHeader($name, $value) {
		header(_hx_string_or_null($name) . ": " . _hx_string_or_null($value));
	}
	public function setReturnCode($code, $message = null) {
		php_Web::setReturnCode($code);
		if($message !== null) {
			Sys::hprint($message);
		}
	}
	public function parseBody($rawData) {
		$data = null;
		$tmp = null;
		if($rawData !== "") {
			$tmp = $rawData !== null;
		} else {
			$tmp = false;
		}
		if($tmp) {
			if(_hx_index_of($this->headers->get("content-type"), "application/json", null) !== -1) {
				$data = haxe_Json::phpJsonDecode($rawData);
			} else {
				$data = _hx_anonymous(array());
				{
					$_g = 0;
					$_g1 = _hx_explode("&", $rawData);
					while($_g < $_g1->length) {
						$keyValStr = $_g1[$_g];
						$_g = $_g + 1;
						$keyVal = _hx_explode("=", $keyValStr);
						{
							$value = urldecode($keyVal[1]);
							$data->{$keyVal[0]} = $value;
							unset($value);
						}
						unset($keyValStr,$keyVal);
					}
				}
			}
		}
		return $data;
	}
	public function removeCookie($key) {
		$d = Date::now();
		$this->setCookie($key, "", Date::fromTime($d->getTime() + -3600));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'controller.Request'; }
}
