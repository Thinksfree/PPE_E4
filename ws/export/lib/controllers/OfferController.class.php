<?php

// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
class controllers_OfferController {
	public function __construct(){}
	static function dispatch($request, $id) {
		if(models_Connexion::auth($request) !== null) {
			$tmp = null;
			if($id === "all") {
				$tmp = $request->method === "GET";
			} else {
				$tmp = false;
			}
			if($tmp) {
				controllers_OfferController::retrieveAll($request);
			} else {
				if($id === null) {
					$request->setReturnCode(406, "Not Acceptable\x0Amissing id");
				} else {
					switch($request->method) {
					case "DELETE":{
						controllers_OfferController::deleteOffer($request, $id);
					}break;
					case "GET":{
						controllers_OfferController::retrieveOneOffer($request, $id);
					}break;
					case "POST":{
						controllers_OfferController::postOffer($request, $id);
					}break;
					default:{
						$request->setReturnCode(501, "Not implement");
					}break;
					}
				}
			}
		} else {
			$request->setReturnCode(406, "Bad Connexion");
		}
	}
	static function retrieveAll($request) {
		$request->setHeader("Content-Type", "application/json");
		$offersInDB = models_Offer::$manager->all(null);
		$first = true;
		$request->send("[");
		{
			$offer = $offersInDB->iterator();
			while($offer->hasNext()) {
				$offer1 = $offer->next();
				if(!$first) {
					$request->send(",");
				} else {
					$first = false;
				}
				Reflect::deleteField($offer1, "_manager");
				Reflect::deleteField($offer1, "_lock");
				Reflect::deleteField($offer1, "__cache__");
				$request->send(haxe_Json::phpJsonEncode($offer1, null, null));
				unset($offer1);
			}
		}
		$request->send("]");
	}
	static function retrieveOneOffer($request, $id) {
		$request->setHeader("Content-Type", "application/json");
		$a = models_Offer::$manager->unsafeGet($id, true);
		if($a === null) {
			$request->setReturnCode(404, "Not Found\x0ANo 'offer/" . _hx_string_or_null($id) . "'");
			return;
		}
		$tmp = "{\"idOffer\":\"" . _hx_string_or_null($a->idOffer) . "\",\"isFrom\":";
		$tmp1 = _hx_string_or_null($tmp) . Std::string($a->isFrom) . ",\"city\":\"";
		$request->send(_hx_string_or_null($tmp1) . _hx_string_or_null($a->city) . "\",\"hour\":\"" . _hx_string_or_null($a->hour) . "\",\"day\":" . _hx_string_rec($a->day, "") . ",\"dte\":\"" . _hx_string_or_null($a->dte) . "\",\"km\":" . _hx_string_rec($a->km, "") . ",\"idUser\":\"" . _hx_string_or_null($a->idUser) . "\"}");
	}
	static function postOffer($request, $id) {
		$offer = null;
		$data = $request->data;
		$user = models_User::$manager->unsafeGet($data->idUser, true);
		$tmp = null;
		if(!models_Connexion::admin($request)) {
			$tmp = models_Connexion::himself($request, $user);
		} else {
			$tmp = true;
		}
		if($tmp) {
			$offer = new models_Offer($data->dte, $data->day, $data->isFrom, $data->hour, $data->city, $data->km, $user);
			$offer->insert();
			$request->send("{\"id\":\"" . _hx_string_or_null($offer->idOffer) . "\"}");
		} else {
			$request->setReturnCode(404, "Not Found\x0ANo 'offer/" . _hx_string_or_null($data->idUser) . "'");
			return;
		}
	}
	static function deleteOffer($request, $id) {
		$offer = models_Offer::$manager->unsafeGet($id, true);
		$tmp = null;
		if(!models_Connexion::admin($request)) {
			$tmp = models_Connexion::himself($request, $offer->get_user());
		} else {
			$tmp = true;
		}
		if($tmp) {
			if($offer === null) {
				$request->setReturnCode(404, "Not Found\x0ANo 'offer/" . _hx_string_or_null($id) . "'");
				return;
			}
			$offer->delete();
		} else {
			$request->setReturnCode(404, "Operation not permitted");
			return;
		}
	}
	function __toString() { return 'controllers.OfferController'; }
}
