<?php

// Generated by Haxe 3.4.2
class Index {
	public function __construct($r) {
		if(!php_Boot::$skip_constructor) {
		$this->request = $r;
	}}
	public $request;
	public function doOffer($id = null) {
		controllers_OfferController::dispatch($this->request, $id);
	}
	public function doUser($id = null) {
		controllers_UserController::dispatch($this->request, $id);
	}
	public function doAuth() {
		controllers_AuthController::dispatch($this->request);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static function main() {
		controller_Listener::boot();
	}
	static function dispatch($request) {
		try {
			sys_db_Manager::initialize();
			sys_db_Manager::set_cnx(php_db_PDO::open("mysql:host=localhost;dbname=covoit_bet", "sqlbtebbani", "savary", null));
			if(!sys_db_TableCreate::exists(models_Offer::$manager)) {
				sys_db_TableCreate::create(models_Offer::$manager, null);
			}
			if(!sys_db_TableCreate::exists(models_User::$manager)) {
				sys_db_TableCreate::create(models_User::$manager, null);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$unknown = $_ex_;
			{
				$request->setReturnCode(503, "Database error\x0A" . Std::string($unknown));
				return;
			}
		}
		try {
			$tmp = new haxe_web_Dispatch($request->query, null);
			$tmp1 = haxe_web_Dispatch::extractConfig(new Index($request));
			$tmp->runtimeDispatch($tmp1);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_web_DispatchError){
				$request->setReturnCode(406, "Not Acceptable\x0ANo route for " . _hx_string_or_null($request->query));
			}
			else { $unknown1 = $_ex_;
			{
				$request->setReturnCode(500, Std::string($unknown1));
			}}
		}
		sys_db_Manager::cleanup();
	}
	function __toString() { return 'Index'; }
}
Index::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("dispatchConfig" => (new _hx_array(array("oy4:authjy21:haxe.web.DispatchRule:1:1ahy4:userjR1:0:1jy18:haxe.web.MatchRule:8:1jR3:3:0y5:offerjR1:0:1jR3:8:1jR3:3:0g")))))));
